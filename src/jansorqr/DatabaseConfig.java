/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jansorqr;

/**
 * THis class holds the information necessary to make a connection to the
 * database server such as: server address, username and password.
 *
 * @author jansoriano acer
 */
public class DatabaseConfig extends javax.swing.JDialog {

    /**
     * Creates new form DatabaseInfo
     *
     * @param parent - the calling parent class
     * @param modal - will it be modal or not
     */
    public DatabaseConfig(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        ipAddress = "10.7.11.115";
        username = "qr_receiver";
        password = "reviecer_rq";
        database = "qr_database";
    }

    /**
     * Creates custom constructor for handling DatabaseConfig instance.
     */
    public DatabaseConfig() {
        initComponents();
        ipAddress = "10.7.11.115";
        username = "qr_receiver";
        password = "reviecer_rq";
        database = "qr_database";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        addressField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        submitButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        jLabel5 = new javax.swing.JLabel();
        databaseField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Database Credentials");
        setModal(true);

        jLabel1.setText("Server IP");

        addressField.setText("host ip");

        jLabel2.setText("Username");

        jLabel3.setText("Password");

        usernameField.setText("username");

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Enter database credentials:");

        passwordField.setText("jPasswordField1");

        jLabel5.setText("Database name");

        databaseField.setText("database");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(138, 138, 138)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(usernameField)
                            .addComponent(passwordField)
                            .addComponent(addressField, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(databaseField)))
                    .addComponent(submitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(165, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(addressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(databaseField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(submitButton)
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        // TODO add your handling code here:
        ipAddress = addressField.getText();
        database = databaseField.getText();
        username = usernameField.getText();
        //extract the password then convert to String
        password = "";
        char pass[] = passwordField.getPassword();
        for (int i = 0; i < pass.length; i++) {
            password = password + pass[i];
        }
        this.dispose();
    }//GEN-LAST:event_submitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            Main.report(ex.getMessage());
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DatabaseConfig dialog = new DatabaseConfig(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addressField;
    private javax.swing.JTextField databaseField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JButton submitButton;
    private javax.swing.JTextField usernameField;
    // End of variables declaration//GEN-END:variables

    protected String ipAddress;
    protected String username;
    protected String password;
    protected String database;      //schema

    /**
     * Gets the IP address of the database.
     *
     * @return
     */
    public String getIP() {
        return ipAddress;
    }

    /**
     * Gets the username of the database.
     *
     * @return
     */
    public String getUsername() {
        return username;
    }

    /**
     * Gets the password of the database.
     *
     * @return
     */
    public String getPassword() {
        return password;
    }

    /**
     * Gets the database name to be used.
     *
     * @return
     */
    public String getDatabaseName() {
        return database;
    }

    /**
     * Shows this dialog to the user.
     */
    public void showDialog() {
        //Shows the Config Dialog
        //Also tries to display current field values contained in this config
        addressField.setText(this.ipAddress);
        databaseField.setText(this.database);
        usernameField.setText(this.username);
        passwordField.setText(this.password);
        setVisible(true);
        pack();
    }

    /**
     * Copies the fields of the input configuration into this object, replacing
     * the fields of this object.
     *
     * @param config - the configuration to copy the values of this object from.
     */
    public void follow(DatabaseConfig config) {
        this.ipAddress = config.ipAddress;
        this.database = config.database;
        this.username = config.username;
        this.password = config.password;
    }

    /**
     * Sets the IP of the server to connect to.
     *
     * @param ipAddress - the IP address of the server to connect to.
     */
    public void setServerIP(String ipAddress) {
        this.ipAddress = ipAddress;
    }

    /**
     * Sets the username of the server to connect to.
     *
     * @param username - the username to be used to connect to the server.
     */
    public void setUsername(String username) {
        this.username = username;
    }

    /**
     * Sets the password of the server to connect to.
     *
     * @param password - the password to be used when connecting to the server.
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * Sets the database to be used.
     *
     * @param databaseName - the name of the database to be used
     */
    public void setDatabaseName(String databaseName) {
        this.database = databaseName;
    }

    /**
     * Sets the database table to be used.
     *
     * @param tableName - the name of the database table to be used.
     */
    public void setTableName(String tableName) {
    }
}
